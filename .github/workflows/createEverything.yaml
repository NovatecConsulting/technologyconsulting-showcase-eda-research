name: Build Everything

on:
  workflow_dispatch:
    inputs:
      deployProducerFunction:
        description: "Deploy producer function [yes/no]"
        required: true
        default: "no"
      deployConsumerFunction:
        description: "Deploy consumer function [yes/no]"
        required: true
        default: "no"
      deployConsumerContainer:
        description: "Deploy consumer container [yes/no]"
        required: true
        default: "no"
#  push:
#    branches: [ main ]

jobs:
  create_infrastructure:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      
      - name: Run Terraform
        env:
          ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
          ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
          STATE_BLOBACCESSKEY: ${{ secrets.STATE_BLOBACCESSKEY }}
          TF_VAR_storage_account_name: 'tcshowcasecommonstorage'
          TF_VAR_environment: 'prod'
          TF_ACTION: 'apply'
        run: ./createInfrastructure.sh


  deploy_producer_function:
    if: ${{ github.event.inputs.deployProducerFunction == 'yes' }}
    needs: create_infrastructure
    runs-on: ubuntu-latest
    env: 
      AZURE_FUNCTIONAPP_NAME: tc-eda-iac-prod-function-customer-producer  # set this to your application's name
      AZURE_FUNCTIONAPP_PACKAGE_PATH: './functions/CustomerChanged'    # set this to the path to your web app project, defaults to the repository root
      DOTNET_VERSION: '3.1.301'              # set this to the dotnet version to use
    steps: 
      - name: 'Checkout GitHub Action'
        uses: actions/checkout@master

      - name: Setup DotNet ${{ env.DOTNET_VERSION }} Environment
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: 'Resolve Project Dependencies Using Dotnet'
        shell: bash
        run: |
          pushd './${{ env.AZURE_FUNCTIONAPP_PACKAGE_PATH }}'
          dotnet build --configuration Release --output ./output
          popd
      - name: 'Login using Azure Service Principal'
        uses: Azure/login@v1
        with: 
          creds: >-
            {
              "clientId":"${{ secrets.ARM_CLIENT_ID }}",
              "clientSecret" : "${{ secrets.ARM_CLIENT_SECRET }}",
              "subscriptionId": "${{ secrets.ARM_SUBSCRIPTION_ID }}",
              "tenantId":"${{ secrets.ARM_TENANT_ID }}" 
            }
      - name: 'Run Azure Functions Action'
        uses: Azure/functions-action@v1
        id: fa
        with:
          app-name: ${{ env.AZURE_FUNCTIONAPP_NAME }}
          package: '${{ env.AZURE_FUNCTIONAPP_PACKAGE_PATH }}/output'

  deployConsumerFunction:
    if: ${{ github.event.inputs.deployConsumerFunction == 'yes' }}
    needs: create_infrastructure
    runs-on: ubuntu-latest
    env:
      AZURE_FUNCTIONAPP_NAME: tc-eda-iac-prod-function-customer-consumer  # set this to your application's name
      AZURE_FUNCTIONAPP_PACKAGE_PATH: './functions/CustomerChangedConsumer'    # set this to the path to your web app project, defaults to the repository root
      PYTHON_VERSION: '3.7'              # set this to the python version to use
    steps:
    - name: 'Checkout GitHub Action'
      uses: actions/checkout@master

    - name: Setup Python ${{ env.PYTHON_VERSION }} Environment
      uses: actions/setup-python@v1
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: 'Resolve Project Dependencies Using Pip'
      shell: bash
      run: |
        pushd './${{ env.AZURE_FUNCTIONAPP_PACKAGE_PATH }}'
        python -m pip install --upgrade pip
        pip install -r requirements.txt --target=".python_packages/lib/site-packages"
        popd

    - name: 'Login using Azure Service Principal'
      uses: Azure/login@v1
      with: 
        creds: >-
          {
            "clientId":"${{ secrets.ARM_CLIENT_ID }}",
            "clientSecret" : "${{ secrets.ARM_CLIENT_SECRET }}",
            "subscriptionId": "${{ secrets.ARM_SUBSCRIPTION_ID }}",
            "tenantId":"${{ secrets.ARM_TENANT_ID }}" 
          }

    - name: 'Run Azure Functions Action'
      uses: Azure/functions-action@v1
      id: fa
      with:
        app-name: ${{ env.AZURE_FUNCTIONAPP_NAME }}
        package: '${{ env.AZURE_FUNCTIONAPP_PACKAGE_PATH }}'

  deployConsumerContainer: 
    if: ${{ github.event.inputs.deployConsumerContainer == 'yes' }}
    needs: create_infrastructure
    runs-on: ubuntu-latest
    env:
      KEY_VAULT_NAME: tcedaiacvaultprod
      TC_KEY_VAULT_NAME: tc-showcase-common-vault
      EVENT_HUB_NAME: customerchanged
      EVENT_HUB_STORAGEACCOUNT_NAME: tcedaiacstorageprod
      EVENT_HUB_CONSUMER_GROUP: $default
      CONTAINER_REGISTRY: 'nttcshowcase.azurecr.io'
      IMAGE_REPOSITORY: 'edaiaccustomerchanged'
      CONTAINER_IMAGE_TAG: 'latest'
      DOCKERFILE_PATH: ./containers/customer-consumer/
      LOCATION: 'westeurope'
      RESOURCE_GROUP: 'tc-eda-iac-prod'
      APP_NAME: '-customer-consumer-container'
      SERVER_PORT: '80'
    steps: 
      - name: Checkout Code 
        uses: actions/checkout@v2
      
      - name: Build and push image
        uses: azure/docker-login@v1
        with: 
          login-server: ${{ secrets.ACR_LOGIN_SERVER }}
          username: ${{ secrets.ACR_USER }}
          password: ${{ secrets.ACR_PW }}

      - run: |
          docker build ${{ env.DOCKERFILE_PATH }} -t ${{ secrets.ACR_LOGIN_SERVER }}/${{ env.IMAGE_REPOSITORY }}:${{ github.sha }}
          docker push ${{ secrets.ACR_LOGIN_SERVER }}/${{ env.IMAGE_REPOSITORY }}:${{ github.sha }}

      - name: 'Login using Azure Service Principal'
        uses: Azure/login@v1
        with: 
          creds: >-
            {
              "clientId":"${{ secrets.ARM_CLIENT_ID }}",
              "clientSecret" : "${{ secrets.ARM_CLIENT_SECRET }}",
              "subscriptionId": "${{ secrets.ARM_SUBSCRIPTION_ID }}",
              "tenantId":"${{ secrets.ARM_TENANT_ID }}" 
            }
      - name: Get Key Vault Secrets (Event Hub)
        uses: Azure/get-keyvault-secrets@v1
        with:
          keyvault: ${{ env.KEY_VAULT_NAME }}
          secrets: 'EVENTHUBSTORAGEACCOUNTACCESSKEY, EVENTHUBCUSTOMERCHANGEDSASCONNECTIONSTRING'
        id: eventHubSecrets
      - name: Deploy to Azure Container Instances
        uses: Azure/aci-deploy@v1.1
        with:
          # Name of the Resource Group in which the Container Instance will be created
          resource-group: ${{ env.RESOURCE_GROUP }}
          # The command line to run when the container is started, e.g. "/bin/bash -c myscript.sh"
          # command-line: # optional, default is 
          # The DNS Name Label for Container with Public IP
          dns-name-label: ${{ env.RESOURCE_GROUP }}${{ env.APP_NAME }}
          # List of environment variables for the container. Space-seperated in "key=value" format
          environment-variables: |
            SPRING_PROFILES_ACTIVE=prod
            EVENTHUBCONNECTIONSTRING=${{ steps.eventHubSecrets.outputs.EVENTHUBCUSTOMERCHANGEDSASCONNECTIONSTRING }}
            SERVERPORT=${{ env.SERVER_PORT }}
          # Specify the fully qualified container image name. For example, "myregistry.azurecr.io/nginx:latest" or "python:3.7.2-alpine/"
          image: ${{ secrets.ACR_LOGIN_SERVER }}/${{ env.IMAGE_REPOSITORY }}:${{ github.sha }}
          # Location where the Container will be deployed
          location: ${{ env.LOCATION }}
          # Name of the Container Group Instance
          name: ${{ env.RESOURCE_GROUP }}${{ env.APP_NAME }}
          # The Ports to Open on the Container. Space seperate the ports for multiple values
          ports: 80 443
          # The container image registry login server
          registry-login-server: ${{ secrets.ACR_LOGIN_SERVER }}
          # Username to log in Container Image Registry Server
          registry-username: ${{ secrets.ACR_USER }}
          # Password to log in Container Image Registry Server
          registry-password: ${{ secrets.ACR_PW }}
